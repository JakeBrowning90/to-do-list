(()=>{"use strict";var t={917:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([t.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=i},426:(t,e,n)=>{n.d(e,{Z:()=>f});var r=n(537),a=n.n(r),o=n(645),i=n.n(o),s=n(667),l=n.n(s),d=new URL(n(287),n.b),c=new URL(n(50),n.b),u=i()(a()),A=l()(d),m=l()(c);u.push([t.id,":root {\n    --dark: rgba(0, 0, 0, 0.5);\n    --light: rgba(0, 0, 0, 0.4);\n}\n\n@font-face {\n    font-family: Rodin;\n    src: url("+A+");\n}\n\nhtml, body, #pauseScreen {\n    font-family: Rodin;\n    font-style: italic;\n    height: 100vh;\n    width: 100vw; \n}\n\nbody {\n    background-image: url("+m+");\n    background-size: cover;\n    background-repeat: no-repeat;\n    color: white;\n    accent-color: yellow;\n}\n\n#addTaskButton {\n    font-weight: bold;\n    font-style: italic;\n}\n\n#pauseScreen {\n    background-color: var(--light);\n    box-sizing: border-box;\n    display: grid;\n    grid-template-columns: 50px 1fr 50px;\n    grid-template-rows: 10vh 85vh 5vh;\n}\n\ntextarea {\n    resize: none;\n    height: 100%;\n}\n\nh1 {\n    font-size: 2em;\n}\n\nbutton, input, select {\n    font-family: Rodin;\n    height: 100%;\n    padding: 5px;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-content: center;\n    text-align: center;\n}\n\n#header, #footer {\n    background-color: var(--dark);\n    grid-column: 1 / -1;\n    padding: 10px;\n}\n\n#header {\n    grid-row: 1 / 2;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 20px;\n    font-style: italic;\n    font-weight: bold;\n}\n\n#content {\n    /* background-color: rgba(255, 255, 255, 0.311); */\n    box-sizing: border-box;\n    height: 100%;\n    max-height: 100%;\n    /* margin: 0 50px 0 50px; */\n    padding: 20px 50px 20px 50px;\n    grid-column: 2 / -2;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.taskFormContent {\n    height: 50vh;\n    width: 50vw; \n    box-sizing: border-box;\n    background-color: rgba(128, 128, 128, 0.526);\n    place-self: center;\n}\n\n.listViewContent {\n    box-sizing: border-box;\n    height: 100%;\n    max-height: 100%;\n    width: 100%; \n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 40px;\n    /* overflow: hidden; */\n}\n\n.listViewContent > * {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n\n.taskListColumn {\n    height: 100%;\n    max-height: 100%;\n    gap: 5px;\n    display: flex;\n    flex-direction: column;\n}\n\n.taskCategoryTabs{\n    box-sizing: border-box;\n    height: 12.5%;\n    max-height: 12.5%;\n    width: 75%;\n    border-bottom: solid black 1px;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    align-self: center;\n}\n\n.displayedTasks {\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    height: 1fr;\n    max-height: 1fr;\n    gap: 4px;\n    overflow: scroll;\n}\n\n.taskRow {\n    /* background-color: greenyellow; */\n    background-color: var(--dark);\n    box-sizing: border-box;\n    border: solid var(--light) 2px;\n    display: grid;\n    grid-template-columns: 1fr 30px;\n    grid-template-rows: 40px 20px;\n    padding-left: 10px;\n}\n\n.taskRow > * {\n    overflow-inline: hidden;\n}\n\n.taskRow:hover {\n    box-sizing: border-box;\n    border: solid white 2px;\n}\n\n.taskRowName {\n    grid-column: 1 / 2;\n    font-weight: bold;\n    font-size: 1.1em;\n    margin: auto 0px;\n}\n\n.taskRowDate {\n    grid-column: 1 / 2;   \n    color: yellow;\n    margin: auto 0px;\n}\n\n.taskRowDefaultMark {\n    grid-column: 2 / -1;\n    grid-row: 1 / -1;\n    background-color: rgba(88, 88, 88, 0.533);\n    display: flex;\n    align-content: center;\n    justify-content: center;\n}\n\n.taskDescColumn {\n    background-color: var(--dark);\n    display: grid;\n    grid-template-columns: 1fr 1fr 2fr;\n    grid-template-rows: 2fr 1fr 15fr 1fr; \n    padding: 10px;\n}\n\n.blankDescPlaceholder {\n    grid-column: 1 / -1;\n}\n\n.taskDetailName, .taskDetailCategory,  .taskDetailPriority, .taskDetailDueDate {\n    display: flex;\n    align-items: center;\n    /* overflow: scroll; */\n}\n\n.taskDetailName {\n    grid-column: 1 / -1;\n    border-bottom: solid var(--light) 2px;\n    font-weight: bold;\n    font-size: 1.3em;\n}\n\n.taskDetailCategory {\n    grid-column: 1 / 2;\n}\n\n.taskDetailPriority {\n    grid-column: 2 / 3;\n}\n\n.taskDetailDueDate{\n    grid-column: 3 / 4;\n    color: yellow;\n}\n\n.taskDetailDescription {\n    grid-column: 1 / -1;\n    border-bottom: solid var(--light) 2px;\n    padding-top: 10px;\n    overflow: scroll\n}\n\n.editTaskBtn {\n    grid-column: 2 / -2;\n}\n\n.deleteTaskBtn {\n    width: 50%;\n    grid-column: -1 / -2\n}\n\n/* Style for form view */\n.taskFormContent {\n    padding: 20px;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: 1fr 1fr 3fr .5fr;\n    gap: 5px;\n    background-color: var(--dark);\n}\n\n.taskFormContent > * {\n    /* border: black solid 1px; */\n}\n\n.formTextInput {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n}\n\n.taskNameDiv, .taskDescDiv {\n    grid-column: 1 / -1;\n}\n\n.formButtonDiv {\n    grid-column: -1 / -2;\n    display: flex;\n    flex-direction: row;\n    align-content: stretch;\n    justify-content: space-between;\n}\n\n#footer {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n    --dark: rgba(0, 0, 0, 0.5);\n    --light: rgba(0, 0, 0, 0.4);\n}\n\n@font-face {\n    font-family: Rodin;\n    src: url(fot-rodin-pro-cufonfonts/FOTRodin\\ Pro\\ M.otf);\n}\n\nhtml, body, #pauseScreen {\n    font-family: Rodin;\n    font-style: italic;\n    height: 100vh;\n    width: 100vw; \n}\n\nbody {\n    background-image: url(icelandBG.jpg);\n    background-size: cover;\n    background-repeat: no-repeat;\n    color: white;\n    accent-color: yellow;\n}\n\n#addTaskButton {\n    font-weight: bold;\n    font-style: italic;\n}\n\n#pauseScreen {\n    background-color: var(--light);\n    box-sizing: border-box;\n    display: grid;\n    grid-template-columns: 50px 1fr 50px;\n    grid-template-rows: 10vh 85vh 5vh;\n}\n\ntextarea {\n    resize: none;\n    height: 100%;\n}\n\nh1 {\n    font-size: 2em;\n}\n\nbutton, input, select {\n    font-family: Rodin;\n    height: 100%;\n    padding: 5px;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-content: center;\n    text-align: center;\n}\n\n#header, #footer {\n    background-color: var(--dark);\n    grid-column: 1 / -1;\n    padding: 10px;\n}\n\n#header {\n    grid-row: 1 / 2;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 20px;\n    font-style: italic;\n    font-weight: bold;\n}\n\n#content {\n    /* background-color: rgba(255, 255, 255, 0.311); */\n    box-sizing: border-box;\n    height: 100%;\n    max-height: 100%;\n    /* margin: 0 50px 0 50px; */\n    padding: 20px 50px 20px 50px;\n    grid-column: 2 / -2;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.taskFormContent {\n    height: 50vh;\n    width: 50vw; \n    box-sizing: border-box;\n    background-color: rgba(128, 128, 128, 0.526);\n    place-self: center;\n}\n\n.listViewContent {\n    box-sizing: border-box;\n    height: 100%;\n    max-height: 100%;\n    width: 100%; \n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 40px;\n    /* overflow: hidden; */\n}\n\n.listViewContent > * {\n    box-sizing: border-box;\n    overflow: hidden;\n}\n\n.taskListColumn {\n    height: 100%;\n    max-height: 100%;\n    gap: 5px;\n    display: flex;\n    flex-direction: column;\n}\n\n.taskCategoryTabs{\n    box-sizing: border-box;\n    height: 12.5%;\n    max-height: 12.5%;\n    width: 75%;\n    border-bottom: solid black 1px;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    align-self: center;\n}\n\n.displayedTasks {\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    height: 1fr;\n    max-height: 1fr;\n    gap: 4px;\n    overflow: scroll;\n}\n\n.taskRow {\n    /* background-color: greenyellow; */\n    background-color: var(--dark);\n    box-sizing: border-box;\n    border: solid var(--light) 2px;\n    display: grid;\n    grid-template-columns: 1fr 30px;\n    grid-template-rows: 40px 20px;\n    padding-left: 10px;\n}\n\n.taskRow > * {\n    overflow-inline: hidden;\n}\n\n.taskRow:hover {\n    box-sizing: border-box;\n    border: solid white 2px;\n}\n\n.taskRowName {\n    grid-column: 1 / 2;\n    font-weight: bold;\n    font-size: 1.1em;\n    margin: auto 0px;\n}\n\n.taskRowDate {\n    grid-column: 1 / 2;   \n    color: yellow;\n    margin: auto 0px;\n}\n\n.taskRowDefaultMark {\n    grid-column: 2 / -1;\n    grid-row: 1 / -1;\n    background-color: rgba(88, 88, 88, 0.533);\n    display: flex;\n    align-content: center;\n    justify-content: center;\n}\n\n.taskDescColumn {\n    background-color: var(--dark);\n    display: grid;\n    grid-template-columns: 1fr 1fr 2fr;\n    grid-template-rows: 2fr 1fr 15fr 1fr; \n    padding: 10px;\n}\n\n.blankDescPlaceholder {\n    grid-column: 1 / -1;\n}\n\n.taskDetailName, .taskDetailCategory,  .taskDetailPriority, .taskDetailDueDate {\n    display: flex;\n    align-items: center;\n    /* overflow: scroll; */\n}\n\n.taskDetailName {\n    grid-column: 1 / -1;\n    border-bottom: solid var(--light) 2px;\n    font-weight: bold;\n    font-size: 1.3em;\n}\n\n.taskDetailCategory {\n    grid-column: 1 / 2;\n}\n\n.taskDetailPriority {\n    grid-column: 2 / 3;\n}\n\n.taskDetailDueDate{\n    grid-column: 3 / 4;\n    color: yellow;\n}\n\n.taskDetailDescription {\n    grid-column: 1 / -1;\n    border-bottom: solid var(--light) 2px;\n    padding-top: 10px;\n    overflow: scroll\n}\n\n.editTaskBtn {\n    grid-column: 2 / -2;\n}\n\n.deleteTaskBtn {\n    width: 50%;\n    grid-column: -1 / -2\n}\n\n/* Style for form view */\n.taskFormContent {\n    padding: 20px;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: 1fr 1fr 3fr .5fr;\n    gap: 5px;\n    background-color: var(--dark);\n}\n\n.taskFormContent > * {\n    /* border: black solid 1px; */\n}\n\n.formTextInput {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n}\n\n.taskNameDiv, .taskDescDiv {\n    grid-column: 1 / -1;\n}\n\n.formButtonDiv {\n    grid-column: -1 / -2;\n    display: flex;\n    flex-direction: row;\n    align-content: stretch;\n    justify-content: space-between;\n}\n\n#footer {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n}"],sourceRoot:""}]);const f=u},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<t.length;d++){var c=[].concat(t[d]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),e.push(c))}},e}},667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},i=[],s=0;s<t.length;s++){var l=t[s],d=r.base?l[0]+r.base:l[0],c=o[d]||0,u="".concat(d," ").concat(c);o[d]=c+1;var A=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var f=a(m,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var s=n(o[i]);e[s].references--}for(var l=r(t,a),d=0;d<o.length;d++){var c=n(o[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},287:(t,e,n)=>{t.exports=n.p+"3503afff0c6b252264cf.otf"},50:(t,e,n)=>{t.exports=n.p+"00a3b93c1da14bf7ccbf.jpg"}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),a=n.n(r),o=n(569),i=n.n(o),s=n(565),l=n.n(s),d=n(216),c=n.n(d),u=n(589),A=n.n(u),m=n(917),f={};f.styleTagTransform=A(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=c(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var h=n(426),g={};g.styleTagTransform=A(),g.setAttributes=l(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=c(),e()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;class p{constructor(t,e,n,r,a){this.title=t,this.description=e,this.dueDate=n,this.priorityLevel=r,this.taskCategory=a}}let C=b();function b(){return null!=JSON.parse(localStorage.getItem("taskList"))?JSON.parse(localStorage.getItem("taskList")):[]}function v(){const t=document.querySelector("#content");for(;t.firstChild;)t.removeChild(t.lastChild)}function y(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function B(t){return y(1,arguments),t instanceof Date||"object"===w(t)&&"[object Date]"===Object.prototype.toString.call(t)}function k(t){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},k(t)}function x(t){y(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===k(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function I(t){if(y(1,arguments),!B(t)&&"number"!=typeof t)return!1;var e=x(t);return!isNaN(Number(e))}function D(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function E(t,e){y(2,arguments);var n=x(t).getTime(),r=D(e);return new Date(n+r)}function T(t,e){y(2,arguments);var n=D(e);return E(t,-n)}var S=864e5;function M(t){y(1,arguments);var e=1,n=x(t),r=n.getUTCDay(),a=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function P(t){y(1,arguments);var e=x(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=M(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=M(o);return e.getTime()>=a.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function L(t){y(1,arguments);var e=P(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=M(n);return r}var U=6048e5,q={};function Y(){return q}function N(t,e){var n,r,a,o,i,s,l,d;y(1,arguments);var c=Y(),u=D(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==a?a:c.weekStartsOn)&&void 0!==r?r:null===(l=c.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=x(t),m=A.getUTCDay(),f=(m<u?7:0)+m-u;return A.setUTCDate(A.getUTCDate()-f),A.setUTCHours(0,0,0,0),A}function W(t,e){var n,r,a,o,i,s,l,d;y(1,arguments);var c=x(t),u=c.getUTCFullYear(),A=Y(),m=D(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:A.firstWeekContainsDate)&&void 0!==r?r:null===(l=A.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(u+1,0,m),f.setUTCHours(0,0,0,0);var h=N(f,e),g=new Date(0);g.setUTCFullYear(u,0,m),g.setUTCHours(0,0,0,0);var p=N(g,e);return c.getTime()>=h.getTime()?u+1:c.getTime()>=p.getTime()?u:u-1}function j(t,e){var n,r,a,o,i,s,l,d;y(1,arguments);var c=Y(),u=D(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:c.firstWeekContainsDate)&&void 0!==r?r:null===(l=c.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1),A=W(t,e),m=new Date(0);m.setUTCFullYear(A,0,u),m.setUTCHours(0,0,0,0);var f=N(m,e);return f}var R=6048e5;function z(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const O=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return z("yy"===e?r%100:r,e.length)},H=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):z(n+1,2)},F=function(t,e){return z(t.getUTCDate(),e.length)},Q=function(t,e){return z(t.getUTCHours()%12||12,e.length)},Z=function(t,e){return z(t.getUTCHours(),e.length)},X=function(t,e){return z(t.getUTCMinutes(),e.length)},_=function(t,e){return z(t.getUTCSeconds(),e.length)},G=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return z(Math.floor(r*Math.pow(10,n-3)),e.length)};var J={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return O(t,e)},Y:function(t,e,n,r){var a=W(t,r),o=a>0?a:1-a;return"YY"===e?z(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):z(o,e.length)},R:function(t,e){return z(P(t),e.length)},u:function(t,e){return z(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return z(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return z(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return H(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return z(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=function(t,e){y(1,arguments);var n=x(t),r=N(n,e).getTime()-j(n,e).getTime();return Math.round(r/R)+1}(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):z(a,e.length)},I:function(t,e,n){var r=function(t){y(1,arguments);var e=x(t),n=M(e).getTime()-L(e).getTime();return Math.round(n/U)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):z(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):F(t,e)},D:function(t,e,n){var r=function(t){y(1,arguments);var e=x(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),a=n-r;return Math.floor(a/S)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):z(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return z(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return z(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return z(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Q(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Z(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):z(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):z(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):X(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):_(t,e)},S:function(t,e){return G(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return $(a);case"XXXX":case"XX":return K(a);default:return K(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return $(a);case"xxxx":case"xx":return K(a);default:return K(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+V(a,":");default:return"GMT"+K(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+V(a,":");default:return"GMT"+K(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return z(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return z((r._originalDate||t).getTime(),e.length)}};function V(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=e||"";return n+String(a)+i+z(o,2)}function $(t,e){return t%60==0?(t>0?"-":"+")+z(Math.abs(t)/60,2):K(t,e)}function K(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+z(Math.floor(a/60),2)+n+z(a%60,2)}const tt=J;var et=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},nt=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const rt={p:nt,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return et(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",et(a,e)).replace("{{time}}",nt(o,e))}};function at(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var ot=["D","DD"],it=["YY","YYYY"];function st(t){return-1!==ot.indexOf(t)}function lt(t){return-1!==it.indexOf(t)}function dt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ct={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ut(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const At={date:ut({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ut({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ut({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var mt={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ft(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=t.formattingValues[o]||t.formattingValues[a]}else{var i=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[s]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const ht={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:ft({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ft({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:ft({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ft({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ft({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function gt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,s=o[0],l=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(l)?Ct(l,(function(t){return t.test(s)})):pt(l,(function(t){return t.test(s)}));i=t.valueCallback?t.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var c=e.slice(s.length);return{value:i,rest:c}}}function pt(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function Ct(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var bt,vt={ordinalNumber:(bt={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(bt.matchPattern);if(!n)return null;var r=n[0],a=t.match(bt.parsePattern);if(!a)return null;var o=bt.valueCallback?bt.valueCallback(a[0]):a[0];o=e.valueCallback?e.valueCallback(o):o;var i=t.slice(r.length);return{value:o,rest:i}}),era:gt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:gt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:gt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:gt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:gt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const yt={code:"en-US",formatDistance:function(t,e,n){var r,a=ct[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:At,formatRelative:function(t,e,n,r){return mt[t]},localize:ht,match:vt,options:{weekStartsOn:0,firstWeekContainsDate:1}};var wt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Bt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,kt=/^'([^]*?)'?$/,xt=/''/g,It=/[a-zA-Z]/;function Dt(t,e,n){var r,a,o,i,s,l,d,c,u,A,m,f,h,g,p,C,b,v;y(2,arguments);var w=String(e),B=Y(),k=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:B.locale)&&void 0!==r?r:yt,E=D(null!==(o=null!==(i=null!==(s=null!==(l=null==n?void 0:n.firstWeekContainsDate)&&void 0!==l?l:null==n||null===(d=n.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==s?s:B.firstWeekContainsDate)&&void 0!==i?i:null===(u=B.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==o?o:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=D(null!==(m=null!==(f=null!==(h=null!==(g=null==n?void 0:n.weekStartsOn)&&void 0!==g?g:null==n||null===(p=n.locale)||void 0===p||null===(C=p.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==h?h:B.weekStartsOn)&&void 0!==f?f:null===(b=B.locale)||void 0===b||null===(v=b.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==m?m:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!k.localize)throw new RangeError("locale must contain localize property");if(!k.formatLong)throw new RangeError("locale must contain formatLong property");var M=x(t);if(!I(M))throw new RangeError("Invalid time value");var P=at(M),L=T(M,P),U={firstWeekContainsDate:E,weekStartsOn:S,locale:k,_originalDate:M},q=w.match(Bt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,rt[e])(t,k.formatLong):t})).join("").match(wt).map((function(r){if("''"===r)return"'";var a=r[0];if("'"===a)return Et(r);var o=tt[a];if(o)return null!=n&&n.useAdditionalWeekYearTokens||!lt(r)||dt(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!st(r)||dt(r,e,String(t)),o(L,r,k.localize,U);if(a.match(It))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("");return q}function Et(t){var e=t.match(kt);return e?e[1].replace(xt,"'"):t}const Tt=(t,e,n,r,a,o)=>{const i=document.querySelector("#content"),s=document.createElement("form");s.classList.add("taskFormContent");const l=document.createElement("div");l.classList.add("formTextInput","taskNameDiv");const d=document.createElement("label");d.setAttribute("for","taskName"),d.textContent="Task name:";const c=document.createElement("input");c.setAttribute("required",""),null!=t&&c.setAttribute("value",t),c.setAttribute("id","taskName"),c.setAttribute("name","taskName");const u=document.createElement("div");u.classList.add("formTextInput","taskDescDiv");const A=document.createElement("label");A.setAttribute("for","taskDesc"),A.textContent="Description:";const m=document.createElement("textarea");m.setAttribute("required",""),null!=e&&(m.textContent=e),m.setAttribute("id","taskDesc"),m.setAttribute("name","taskDesc");const f=document.createElement("div");f.classList.add("formTextInput","taskPriorityDiv");const h=document.createElement("label");h.setAttribute("for","taskPriority"),h.textContent="Priority:";const g=document.createElement("select");g.setAttribute("required",""),null!=r&&g.setAttribute("value",r),g.setAttribute("id","taskPriority"),g.setAttribute("name","taskPriority");const b=document.createElement("option");b.textContent="Essential",b.setAttribute("value","essential");const y=document.createElement("option");y.textContent="Normal",y.setAttribute("value","Normal"),g.appendChild(y),g.appendChild(b);const w=document.createElement("div");w.classList.add("formTextInput","taskCategoryDiv");const B=document.createElement("label");B.setAttribute("for","taskCategory"),B.textContent="Category:";const k=document.createElement("select"),x=document.createElement("option");x.textContent="Work",x.setAttribute("value","Work");const I=document.createElement("option");I.textContent="House",I.setAttribute("value","House");const D=document.createElement("option");D.textContent="Hobby",D.setAttribute("value","Hobby"),k.appendChild(x),k.appendChild(I),k.appendChild(D),k.setAttribute("required",""),null!=a&&k.setAttribute("value",a),k.setAttribute("id","category"),k.setAttribute("name","category");const E=document.createElement("div");E.classList.add("formTextInput","dueDateDiv");const T=document.createElement("label");T.setAttribute("for","dueDate"),T.textContent="Due date:";const S=document.createElement("input");S.setAttribute("type","date"),S.setAttribute("required",""),null!=o&&S.setAttribute("value",o),S.setAttribute("id","dueDateInput"),S.setAttribute("name","dueDateInput");const M=document.createElement("input");M.setAttribute("type","submit"),M.setAttribute("id","addTask"),M.textContent="Add Task";const P=document.createElement("button");P.classList.add("cancelNewTaskBtn"),P.textContent="Cancel",P.addEventListener("click",(function(){v(),Pt()})),s.appendChild(l),l.appendChild(d),l.appendChild(c),s.appendChild(w),w.appendChild(B),w.appendChild(k),s.appendChild(f),f.appendChild(h),f.appendChild(g),s.appendChild(E),E.appendChild(T),E.appendChild(S),s.appendChild(u),u.appendChild(A),u.appendChild(m);const L=document.createElement("div");L.classList.add("formButtonDiv"),s.appendChild(L),L.appendChild(P),L.appendChild(M),s.addEventListener("submit",(t=>{t.preventDefault();let e=Dt(new Date(`${dueDateInput.value}T00:00`),"PP"),r=new p(taskName.value,taskDesc.value,e,g.value,category.value);null!=n&&C.splice(n,1),function(t){C.push(t),localStorage.setItem("taskList",JSON.stringify(C))}(r),v(),Pt()})),i.appendChild(s)};function St(t,e,n,r,a,o){const i=document.querySelector(".taskDescColumn");for(;i.firstChild;)i.removeChild(i.lastChild);const s=document.createElement("div");s.classList.add("taskDetailName"),s.textContent=t;const l=document.createElement("div");l.classList.add("taskDetailCategory"),l.textContent=r;const d=document.createElement("div");d.classList.add("taskDetailPriority"),d.textContent=n;const c=document.createElement("div");c.classList.add("taskDetailDueDate"),c.textContent=Dt(new Date(a),"PP");const u=document.createElement("div");u.classList.add("taskDetailDescription"),u.textContent=e;const A=document.createElement("button");A.classList.add("editTaskBtn"),A.textContent="Edit",A.addEventListener("click",(function(){v(),Tt(t,e,o)}));const m=document.createElement("button");m.classList.add("deleteTaskBtn"),m.textContent="Delete",m.addEventListener("click",(function(){console.log("removed!"),C.splice(o,1),localStorage.setItem("taskList",JSON.stringify(C)),v(),Pt()})),i.appendChild(s),i.appendChild(l),i.appendChild(d),i.appendChild(c),i.appendChild(u),i.appendChild(A),i.appendChild(m)}function Mt(t){const e=document.querySelector(".displayedTasks");for(;e.firstChild;)e.removeChild(e.lastChild);let n=b();if(null==t)for(const t in n){let r=document.createElement("div");r.classList.add("taskRow");let a=document.createElement("label"),o=document.createElement("div");o.classList.add("taskRowName");let i=document.createElement("div");i.classList.add("taskRowDate");let s=document.createElement("div");s.classList.add("taskRowDefaultMark");let l=document.createElement("input");l.setAttribute("type","radio"),l.setAttribute("name","currentSelection"),o.textContent=n[t].title,i.textContent=Dt(new Date(n[t].dueDate),"PP"),r.appendChild(o),r.appendChild(i),r.appendChild(s),s.appendChild(l),r.addEventListener("click",(function(){St(n[t].title,n[t].description,n[t].priorityLevel,n[t].taskCategory,n[t].dueDate,t)})),a.appendChild(r),e.appendChild(a)}else for(const r in n)if(n[r].taskCategory==t){let t=document.createElement("div");t.classList.add("taskRow");let a=document.createElement("label"),o=document.createElement("div");o.classList.add("taskRowName");let i=document.createElement("div");i.classList.add("taskRowDate");let s=document.createElement("div");s.classList.add("taskRowDefaultMark");let l=document.createElement("input");l.setAttribute("type","radio"),l.setAttribute("name","currentSelection"),o.textContent=n[r].title,i.textContent=n[r].dueDate,t.appendChild(o),t.appendChild(i),t.appendChild(s),s.appendChild(l),t.addEventListener("click",(function(){St(n[r].title,n[r].description,n[r].priorityLevel,n[r].taskCategory,n[r].dueDate,r)})),a.appendChild(t),e.appendChild(a)}}const Pt=()=>{const t=document.querySelector("#content"),e=document.createElement("div");e.classList.add("listViewContent");const n=document.createElement("div");n.classList.add("taskListColumn");const r=document.createElement("div");r.classList.add("taskCategoryTabs");const a=document.createElement("button"),o=document.createElement("button"),i=document.createElement("button"),s=document.createElement("button");a.textContent="All",i.textContent="House",o.textContent="Work",s.textContent="Hobbies",a.addEventListener("click",(function(){Mt()})),o.addEventListener("click",(function(){Mt("Work")})),i.addEventListener("click",(function(){Mt("House")})),s.addEventListener("click",(function(){Mt("Hobby")}));const l=document.createElement("div");l.classList.add("displayedTasks");const d=document.createElement("div");d.classList.add("taskDescColumn");const c=document.createElement("div");c.classList.add("blankDescPlaceholder"),c.textContent="Select a task to display details and options",t.appendChild(e),e.appendChild(n),n.appendChild(r),n.appendChild(l),r.appendChild(a),r.appendChild(i),r.appendChild(o),r.appendChild(s),e.appendChild(d),d.appendChild(c),Mt()};!function(t){let e;try{e=window.localStorage;const t="__storage_test__";e.setItem(t,t),e.removeItem(t)}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}(),Pt(),document.getElementById("addTaskButton").addEventListener("click",(function(){v(),Tt()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,